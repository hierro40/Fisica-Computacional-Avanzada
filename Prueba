{
 "metadata": {
  "kernelspec": {
   "codemirror_mode": "julia",
   "display_name": "Julia",
   "language": "julia",
   "name": "julia"
  },
  "language": "Julia",
  "name": "",
  "signature": "sha256:5bd0b361037612c28ea1ca46e00f0c9621636cc065ea2183d196cd3fe37d22dd"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "A=rand(3,3)\n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "3x3 Array{Float64,2}:\n",
        " 0.916454  0.312883  0.0291289\n",
        " 0.540449  0.599044  0.177166 \n",
        " 0.111509  0.557226  0.337076 "
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f(x)=x^2+4"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "f (generic function with 1 method)"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "f(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 6,
       "text": [
        "8"
       ]
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "y=3+6im\n",
      "z=3+5im\n",
      "z+y"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 8,
       "text": [
        "6 + 11im"
       ]
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "w=3//4\n",
      "typeof(w)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 9,
       "text": [
        "Rational{Int64} (constructor with 1 method)"
       ]
      }
     ],
     "prompt_number": 9
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#we can do interesting things like\n",
      "w^2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "9//16"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "methods(//)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "8 methods for generic function <b>//</b>:<ul><li> //(n::<b>Integer</b>,d::<b>Integer</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L15\" target=\"_blank\">rational.jl:15</a><li> //(x::<b>Rational{T<:Integer}</b>,y::<b>Integer</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L16\" target=\"_blank\">rational.jl:16</a><li> //(x::<b>Integer</b>,y::<b>Rational{T<:Integer}</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L17\" target=\"_blank\">rational.jl:17</a><li> //(x::<b>Rational{T<:Integer}</b>,y::<b>Rational{T<:Integer}</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L18\" target=\"_blank\">rational.jl:18</a><li> //(x::<b>Complex{T<:Real}</b>,y::<b>Real</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L19\" target=\"_blank\">rational.jl:19</a><li> //(x::<b>Real</b>,y::<b>Complex{T<:Real}</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L20\" target=\"_blank\">rational.jl:20</a><li> //(x::<b>Complex{T<:Real}</b>,y::<b>Complex{T<:Real}</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L23\" target=\"_blank\">rational.jl:23</a><li> //(X::<b>AbstractArray{T,N}</b>,y::<b>Number</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/rational.jl#L28\" target=\"_blank\">rational.jl:28</a></ul>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 12,
       "text": [
        "# 8 methods for generic function \"//\":\n",
        "//(n::Integer,d::Integer) at rational.jl:15\n",
        "//(x::Rational{T<:Integer},y::Integer) at rational.jl:16\n",
        "//(x::Integer,y::Rational{T<:Integer}) at rational.jl:17\n",
        "//(x::Rational{T<:Integer},y::Rational{T<:Integer}) at rational.jl:18\n",
        "//(x::Complex{T<:Real},y::Real) at rational.jl:19\n",
        "//(x::Real,y::Complex{T<:Real}) at rational.jl:20\n",
        "//(x::Complex{T<:Real},y::Complex{T<:Real}) at rational.jl:23\n",
        "//(X::AbstractArray{T,N},y::Number) at rational.jl:28"
       ]
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "3+-(32)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "-29"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l=[1,2,3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 14,
       "text": [
        "3-element Array{Int64,1}:\n",
        " 1\n",
        " 2\n",
        " 3"
       ]
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l'*l"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 15,
       "text": [
        "1-element Array{Int64,1}:\n",
        " 14"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "m=[3.5,2,6.1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 16,
       "text": [
        "3-element Array{Float64,1}:\n",
        " 3.5\n",
        " 2.0\n",
        " 6.1"
       ]
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "n=[3,\"Hola\"]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 17,
       "text": [
        "2-element Array{Any,1}:\n",
        " 3      \n",
        "  \"Hola\""
       ]
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t=[1:5]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 18,
       "text": [
        "5-element Array{Int64,1}:\n",
        " 1\n",
        " 2\n",
        " 3\n",
        " 4\n",
        " 5"
       ]
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Para imdicar \u00edndices\n",
      "t[2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 20,
       "text": [
        "2"
       ]
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "t+t"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 23,
       "text": [
        "5-element Array{Int64,1}:\n",
        "  2\n",
        "  4\n",
        "  6\n",
        "  8\n",
        " 10"
       ]
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "names(t)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 24,
       "text": [
        "0-element Array{Any,1}"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "methods(push!)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "36 methods for generic function <b>push!</b>:<ul><li> push!(a::<b>Array{Any,1}</b>,item) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/array.jl#L464\" target=\"_blank\">array.jl:464</a><li> push!<i>{T}</i>(a::<b>Array{T,1}</b>,item) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/array.jl#L453\" target=\"_blank\">array.jl:453</a><li> push!(B::<b>BitArray{1}</b>,item) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/bitarray.jl#L454\" target=\"_blank\">bitarray.jl:454</a><li> push!(s::<b>IntSet</b>,n::<b>Integer</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/intset.jl#L32\" target=\"_blank\">intset.jl:32</a><li> push!(::<b>EnvHash</b>,k::<b>String</b>,v) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/env.jl#L114\" target=\"_blank\">env.jl:114</a><li> push!(t::<b>Associative{K,V}</b>,key,v) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/dict.jl#L241\" target=\"_blank\">dict.jl:241</a><li> push!(s::<b>Set{T}</b>,x) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/set.jl#L18\" target=\"_blank\">set.jl:18</a><li> push!<i>{T}</i>(q::<b>Deque{T}</b>,x) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/deque.jl#L189\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/deque.jl:189</a><li> push!(s::<b>Stack{S}</b>,x) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/stack.jl#L16\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/stack.jl:16</a><li> push!<i>{T,V<:Number,V2<:Number}</i>(ct::<b>Accumulator{T,V<:Number}</b>,r::<b>Accumulator{T,V2<:Number}</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/accumulator.jl#L50\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:50</a><li> push!<i>{T,V<:Number}</i>(ct::<b>Accumulator{T,V<:Number}</b>,x::<b>T</b>,a::<b>V<:Number</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/accumulator.jl#L45\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:45</a><li> push!<i>{T,V<:Number,V2<:Number}</i>(ct::<b>Accumulator{T,V<:Number}</b>,x::<b>T</b>,a::<b>V2<:Number</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/accumulator.jl#L46\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:46</a><li> push!<i>{T,V<:Number}</i>(ct::<b>Accumulator{T,V<:Number}</b>,x::<b>T</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/accumulator.jl#L47\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:47</a><li> push!<i>{K,C}</i>(cc::<b>ClassifiedCollections{K,C}</b>,key::<b>K</b>,e) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/classifiedcollections.jl#L44\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/classifiedcollections.jl:44</a><li> push!(s::<b>IntDisjointSets</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/disjoint_set.jl#L82\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/disjoint_set.jl:82</a><li> push!<i>{T}</i>(s::<b>DisjointSets{T}</b>,x::<b>T</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/disjoint_set.jl#L127\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/disjoint_set.jl:127</a><li> push!<i>{T}</i>(h::<b>BinaryHeap{T,Comp}</b>,v::<b>T</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/heaps/binary_heap.jl#L138\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/heaps/binary_heap.jl:138</a><li> push!<i>{T}</i>(h::<b>MutableBinaryHeap{T,Comp}</b>,v::<b>T</b>) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/heaps/mutable_binary_heap.jl#L201\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/heaps/mutable_binary_heap.jl:201</a><li> push!(s::<b>OrderedSet{T}</b>,x) at <a href=\"https://github.com/JuliaLang/DataStructures.jl/tree/d5308421daea7370a60d3e2718e1b3fc5fe47f50/src/orderedset.jl#L26\" target=\"_blank\">/home/juser/.julia/v0.3/DataStructures/src/orderedset.jl:26</a><li> push!<i>{T,E}</i>(h::<b>Histogram{T,1,E}</b>,x::<b>Real</b>,w::<b>Real</b>) at <a href=\"https://github.com/JuliaStats/StatsBase.jl/tree/03700097a864588019abf743f3534c1d4e568e83/src/hist.jl#L112\" target=\"_blank\">/home/juser/.julia/v0.3/StatsBase/src/hist.jl:112</a><li> push!<i>{T,E}</i>(h::<b>Histogram{T,1,E}</b>,x::<b>Real</b>) at <a href=\"https://github.com/JuliaStats/StatsBase.jl/tree/03700097a864588019abf743f3534c1d4e568e83/src/hist.jl#L122\" target=\"_blank\">/home/juser/.julia/v0.3/StatsBase/src/hist.jl:122</a><li> push!<i>{T,N}</i>(h::<b>Histogram{T,N,E}</b>,xs::<b>NTuple{N,Real}</b>,w::<b>Real</b>) at <a href=\"https://github.com/JuliaStats/StatsBase.jl/tree/03700097a864588019abf743f3534c1d4e568e83/src/hist.jl#L149\" target=\"_blank\">/home/juser/.julia/v0.3/StatsBase/src/hist.jl:149</a><li> push!<i>{T,N}</i>(h::<b>Histogram{T,N,E}</b>,xs::<b>NTuple{N,Real}</b>) at <a href=\"https://github.com/JuliaStats/StatsBase.jl/tree/03700097a864588019abf743f3534c1d4e568e83/src/hist.jl#L161\" target=\"_blank\">/home/juser/.julia/v0.3/StatsBase/src/hist.jl:161</a><li> push!(dv::<b>DataArray{T,1}</b>,v::<b>NAtype</b>) at <a href=\"https://github.com/JuliaStats/DataArrays.jl/tree/3a8cad5d068d95df33c4d5e33e01e865281b8b06/src/datavector.jl#L9\" target=\"_blank\">/home/juser/.julia/v0.3/DataArrays/src/datavector.jl:9</a><li> push!<i>{S,T}</i>(dv::<b>DataArray{S,1}</b>,v::<b>T</b>) at <a href=\"https://github.com/JuliaStats/DataArrays.jl/tree/3a8cad5d068d95df33c4d5e33e01e865281b8b06/src/datavector.jl#L15\" target=\"_blank\">/home/juser/.julia/v0.3/DataArrays/src/datavector.jl:15</a><li> push!<i>{T,R}</i>(pdv::<b>PooledDataArray{T,R,1}</b>,v::<b>NAtype</b>) at <a href=\"https://github.com/JuliaStats/DataArrays.jl/tree/3a8cad5d068d95df33c4d5e33e01e865281b8b06/src/datavector.jl#L123\" target=\"_blank\">/home/juser/.julia/v0.3/DataArrays/src/datavector.jl:123</a><li> push!<i>{S,R,T}</i>(pdv::<b>PooledDataArray{S,R,1}</b>,v::<b>T</b>) at <a href=\"https://github.com/JuliaStats/DataArrays.jl/tree/3a8cad5d068d95df33c4d5e33e01e865281b8b06/src/datavector.jl#L128\" target=\"_blank\">/home/juser/.julia/v0.3/DataArrays/src/datavector.jl:128</a><li> push!(x::<b>Index</b>,nm::<b>Symbol</b>) at <a href=\"https://github.com/JuliaStats/DataFrames.jl/tree/dbdb59ac5f3ef428c7e7521e23d46452d340995d/src/other/index.jl#L73\" target=\"_blank\">/home/juser/.julia/v0.3/DataFrames/src/other/index.jl:73</a><li> push!(df::<b>DataFrame</b>,associative::<b>Associative{Symbol,Any}</b>) at <a href=\"https://github.com/JuliaStats/DataFrames.jl/tree/dbdb59ac5f3ef428c7e7521e23d46452d340995d/src/dataframe/dataframe.jl#L760\" target=\"_blank\">/home/juser/.julia/v0.3/DataFrames/src/dataframe/dataframe.jl:760</a><li> push!(df::<b>DataFrame</b>,associative::<b>Associative{K,V}</b>) at <a href=\"https://github.com/JuliaStats/DataFrames.jl/tree/dbdb59ac5f3ef428c7e7521e23d46452d340995d/src/dataframe/dataframe.jl#L777\" target=\"_blank\">/home/juser/.julia/v0.3/DataFrames/src/dataframe/dataframe.jl:777</a><li> push!(df::<b>DataFrame</b>,iterable) at <a href=\"https://github.com/JuliaStats/DataFrames.jl/tree/dbdb59ac5f3ef428c7e7521e23d46452d340995d/src/dataframe/dataframe.jl#L796\" target=\"_blank\">/home/juser/.julia/v0.3/DataFrames/src/dataframe/dataframe.jl:796</a><li> push!(t::<b>OptimizationTrace</b>,s::<b>OptimizationState</b>) at <a href=\"https://github.com/JuliaOpt/Optim.jl/tree/5d31facb01f19f78ff60f47b459a89f3af7ea014/src/types.jl#L79\" target=\"_blank\">/home/juser/.julia/v0.3/Optim/src/types.jl:79</a><li> push!<i>{T}</i>(lsr::<b>LineSearchResults{T}</b>,a::<b>T</b>,v::<b>T</b>,d::<b>T</b>) at <a href=\"https://github.com/JuliaOpt/Optim.jl/tree/5d31facb01f19f78ff60f47b459a89f3af7ea014/src/types.jl#L208\" target=\"_blank\">/home/juser/.julia/v0.3/Optim/src/types.jl:208</a><li> push!(A) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/abstractarray.jl#L1394\" target=\"_blank\">abstractarray.jl:1394</a><li> push!(A,a,b) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/abstractarray.jl#L1395\" target=\"_blank\">abstractarray.jl:1395</a><li> push!(A,a,b,c...) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/abstractarray.jl#L1396\" target=\"_blank\">abstractarray.jl:1396</a></ul>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 25,
       "text": [
        "# 36 methods for generic function \"push!\":\n",
        "push!(a::Array{Any,1},item) at array.jl:464\n",
        "push!{T}(a::Array{T,1},item) at array.jl:453\n",
        "push!(B::BitArray{1},item) at bitarray.jl:454\n",
        "push!(s::IntSet,n::Integer) at intset.jl:32\n",
        "push!(::EnvHash,k::String,v) at env.jl:114\n",
        "push!(t::Associative{K,V},key,v) at dict.jl:241\n",
        "push!(s::Set{T},x) at set.jl:18\n",
        "push!{T}(q::Deque{T},x) at /home/juser/.julia/v0.3/DataStructures/src/deque.jl:189\n",
        "push!(s::Stack{S},x) at /home/juser/.julia/v0.3/DataStructures/src/stack.jl:16\n",
        "push!{T,V<:Number,V2<:Number}(ct::Accumulator{T,V<:Number},r::Accumulator{T,V2<:Number}) at /home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:50\n",
        "push!{T,V<:Number}(ct::Accumulator{T,V<:Number},x::T,a::V<:Number) at /home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:45\n",
        "push!{T,V<:Number,V2<:Number}(ct::Accumulator{T,V<:Number},x::T,a::V2<:Number) at /home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:46\n",
        "push!{T,V<:Number}(ct::Accumulator{T,V<:Number},x::T) at /home/juser/.julia/v0.3/DataStructures/src/accumulator.jl:47\n",
        "push!{K,C}(cc::ClassifiedCollections{K,C},key::K,e) at /home/juser/.julia/v0.3/DataStructures/src/classifiedcollections.jl:44\n",
        "push!(s::IntDisjointSets) at /home/juser/.julia/v0.3/DataStructures/src/disjoint_set.jl:82\n",
        "push!{T}(s::DisjointSets{T},x::T) at /home/juser/.julia/v0.3/DataStructures/src/disjoint_set.jl:127\n",
        "push!{T}(h::BinaryHeap{T,Comp},v::T) at /home/juser/.julia/v0.3/DataStructures/src/heaps/binary_heap.jl:138\n",
        "push!{T}(h::MutableBinaryHeap{T,Comp},v::T) at /home/juser/.julia/v0.3/DataStructures/src/heaps/mutable_binary_heap.jl:201\n",
        "push!(s::OrderedSet{T},x) at /home/juser/.julia/v0.3/DataStructures/src/orderedset.jl:26\n",
        "push!{T,E}(h::Histogram{T,1,E},x::Real,w::Real) at /home/juser/.julia/v0.3/StatsBase/src/hist.jl:112\n",
        "push!{T,E}(h::Histogram{T,1,E},x::Real) at /home/juser/.julia/v0.3/StatsBase/src/hist.jl:122\n",
        "push!{T,N}(h::Histogram{T,N,E},xs::NTuple{N,Real},w::Real) at /home/juser/.julia/v0.3/StatsBase/src/hist.jl:149\n",
        "push!{T,N}(h::Histogram{T,N,E},xs::NTuple{N,Real}) at /home/juser/.julia/v0.3/StatsBase/src/hist.jl:161\n",
        "push!(dv::DataArray{T,1},v::NAtype) at /home/juser/.julia/v0.3/DataArrays/src/datavector.jl:9\n",
        "push!{S,T}(dv::DataArray{S,1},v::T) at /home/juser/.julia/v0.3/DataArrays/src/datavector.jl:15\n",
        "push!{T,R}(pdv::PooledDataArray{T,R,1},v::NAtype) at /home/juser/.julia/v0.3/DataArrays/src/datavector.jl:123\n",
        "push!{S,R,T}(pdv::PooledDataArray{S,R,1},v::T) at /home/juser/.julia/v0.3/DataArrays/src/datavector.jl:128\n",
        "push!(x::Index,nm::Symbol) at /home/juser/.julia/v0.3/DataFrames/src/other/index.jl:73\n",
        "push!(df::DataFrame,associative::Associative{Symbol,Any}) at /home/juser/.julia/v0.3/DataFrames/src/dataframe/dataframe.jl:760\n",
        "push!(df::DataFrame,associative::Associative{K,V}) at /home/juser/.julia/v0.3/DataFrames/src/dataframe/dataframe.jl:777\n",
        "push!(df::DataFrame,iterable) at /home/juser/.julia/v0.3/DataFrames/src/dataframe/dataframe.jl:796\n",
        "push!(t::OptimizationTrace,s::OptimizationState) at /home/juser/.julia/v0.3/Optim/src/types.jl:79\n",
        "push!{T}(lsr::LineSearchResults{T},a::T,v::T,d::T) at /home/juser/.julia/v0.3/Optim/src/types.jl:208\n",
        "push!(A) at abstractarray.jl:1394\n",
        "push!(A,a,b) at abstractarray.jl:1395\n",
        "push!(A,a,b,c...) at abstractarray.jl:1396"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#IMPORTANTE\n",
      "p=[3,4,5]\n",
      "push!(p,6)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 26,
       "text": [
        "4-element Array{Int64,1}:\n",
        " 3\n",
        " 4\n",
        " 5\n",
        " 6"
       ]
      }
     ],
     "prompt_number": 26
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "l.*m"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 30,
       "text": [
        "3-element Array{Float64,1}:\n",
        "  3.5\n",
        "  4.0\n",
        " 18.3"
       ]
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#Producto punto\n",
      "dot(l,m)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 31,
       "text": [
        "25.799999999999997"
       ]
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=[2 1;3 3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 32,
       "text": [
        "2x2 Array{Int64,2}:\n",
        " 2  1\n",
        " 3  3"
       ]
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "i=0\n",
      "while i<5 \n",
      "    print(\"$i\\t\")\n",
      "    i += 1\n",
      "end"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "0\t1\t2\t3\t4\t"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "total=0\n",
      "for i=1:10\n",
      "    total+=i\n",
      "end\n",
      "println(\"La suma es $total\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "La suma es 55\n"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "?dot"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "INFO: Loading help data...\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "dot (generic function with 13 methods)\n"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a=3\n",
      "a<5 && println(\"Peque\u00f1o\")# if then\n",
      "a>10 || println(\"Peque\u00f1o\")# if not then"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Peque\u00f1o\n",
        "Peque\u00f1o\n"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a==4 ? println(\"Hola\") : println(\"Falso\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Falso\n"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "#ARREGLOS\n",
      "squares=[i^2 for i in [1:2:10,7]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "6-element Array{Any,1}:\n",
        "  1\n",
        "  9\n",
        " 25\n",
        " 49\n",
        " 81\n",
        " 49"
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sums=[i+j for i=1:5,j=1:5]#Forma compacta de crear marices"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 1,
       "text": [
        "5x5 Array{Int64,2}:\n",
        " 2  3  4  5   6\n",
        " 3  4  5  6   7\n",
        " 4  5  6  7   8\n",
        " 5  6  7  8   9\n",
        " 6  7  8  9  10"
       ]
      }
     ],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sums=[i+j+k for i=1:5,j=1:5,k=1:5]#Arreglo de 5x5x5"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 2,
       "text": [
        "5x5x5 Array{Int64,3}:\n",
        "[:, :, 1] =\n",
        " 3  4  5   6   7\n",
        " 4  5  6   7   8\n",
        " 5  6  7   8   9\n",
        " 6  7  8   9  10\n",
        " 7  8  9  10  11\n",
        "\n",
        "[:, :, 2] =\n",
        " 4  5   6   7   8\n",
        " 5  6   7   8   9\n",
        " 6  7   8   9  10\n",
        " 7  8   9  10  11\n",
        " 8  9  10  11  12\n",
        "\n",
        "[:, :, 3] =\n",
        " 5   6   7   8   9\n",
        " 6   7   8   9  10\n",
        " 7   8   9  10  11\n",
        " 8   9  10  11  12\n",
        " 9  10  11  12  13\n",
        "\n",
        "[:, :, 4] =\n",
        "  6   7   8   9  10\n",
        "  7   8   9  10  11\n",
        "  8   9  10  11  12\n",
        "  9  10  11  12  13\n",
        " 10  11  12  13  14\n",
        "\n",
        "[:, :, 5] =\n",
        "  7   8   9  10  11\n",
        "  8   9  10  11  12\n",
        "  9  10  11  12  13\n",
        " 10  11  12  13  14\n",
        " 11  12  13  14  15"
       ]
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rand()#Numero uniformemente distribuido entre 0 y 1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 3,
       "text": [
        "0.12404958787347886"
       ]
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rand(5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 4,
       "text": [
        "5-element Array{Float64,1}:\n",
        " 0.359922 \n",
        " 0.952802 \n",
        " 0.445792 \n",
        " 0.0930482\n",
        " 0.71408  "
       ]
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rand(5,5)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 5,
       "text": [
        "5x5 Array{Float64,2}:\n",
        " 0.221052  0.454196  0.3394     0.693485   0.377514\n",
        " 0.80151   0.72386   0.29839    0.194656   0.710811\n",
        " 0.896861  0.761646  0.488731   0.0736582  0.900251\n",
        " 0.851037  0.543305  0.102537   0.877466   0.646387\n",
        " 0.373893  0.577486  0.0366432  0.194849   0.847138"
       ]
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=[2 1;1 1]\n",
      "v=[1,1]\n",
      "M*v"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 11,
       "text": [
        "2-element Array{Int64,1}:\n",
        " 3\n",
        " 2"
       ]
      }
     ],
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "@which M*v#IMPORTANTE: Cual es el M\u00e9todo que esta utilizando para la miltiplicaci\u00f3n"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "*<i>{T,S}</i>(A::<b>AbstractArray{T,2}</b>,x::<b>AbstractArray{S,1}</b>) at <a href=\"https://github.com/JuliaLang/julia/tree/a05f87b79ad62beb033817fdfdefa270c9557aaf/base/linalg/matmul.jl#L71\" target=\"_blank\">linalg/matmul.jl:71</a>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "*{T,S}(A::AbstractArray{T,2},x::AbstractArray{S,1}) at linalg/matmul.jl:71"
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "M=[2 1;1 1]\n",
      "w=[0,1]\n",
      "lambda=0\n",
      "k=0\n",
      "for i=1:10#\u00bfPorque desborda con i=100?\n",
      "    k=w[2]\n",
      "    w=M*w\n",
      "    lambda=w[2]/k\n",
      "end\n",
      "println(\"Lambda ser\u00eda $lambda\")"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Lambda ser\u00eda 2.618033813400125\n"
       ]
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "eigmax(M)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 27,
       "text": [
        "2.618033988749895"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
